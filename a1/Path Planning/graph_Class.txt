using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class myGraph : MonoBehaviour {
    public List<Vector3> graph;
    public List<int> parent;
    Vector3 start_pos;

    // constructor
    public myGraph(Vector3 start_pos) {
        this.start_pos = start_pos;
        this.graph = new List<Vector3>();
        this.parent = new List<int>();
        graph.Add(this.start_pos);
        parent.Add(-1);
    }

    // find nearest vertex given a new point
    public Vector3 Nearest_Vertex(Vector3 q_rand) {
        float min_distance = float.MaxValue;
        int nearest_idx = -1;
        for (int i = 0; i < this.graph.Count; i++) {
            float distance = (this.graph[i] - q_rand).magnitude;
            if (distance < min_distance) {
                min_distance = distance;
                nearest_idx = i;
            }
        }
        return this.graph[nearest_idx]; 
    }
    public int Nearest_Vertex_Parent(Vector3 q_rand) {
        float min_distance = float.MaxValue;
        int nearest_idx = -1;
        for (int i = 0; i < this.graph.Count; i++) {
            float distance = (this.graph[i] - q_rand).magnitude;
            if (distance < min_distance) {
                min_distance = distance;
                nearest_idx = i;
            }
        }
        return nearest_idx;
    }

    public void addEdge(int parent, Vector3 to) {
          this.graph.Add(to);
          this.parent.Add(parent);
    }


    public List<Vector3> BACKTRACK (Vector3 goal) {
        List<Vector3> path = new List<Vector3>();
        int idx = this.graph.Count -1 ; // parto dall'ultimo
        do {
            // add node
            // Debug.Log("graph: adding node with id" + idx);
            path.Add(this.graph[idx]);
            idx = this.parent[idx];  // get idx of node parent
        } while (idx != -1);
         path.Reverse();
        return path;
    }
    public int size() {
        return this.graph.Count;
    }

  
}